import Head from "next/head";
import { Button, FormGroup, GridCol, GridContainer, GridRow, TextField } from "@taikai/rocket-kit";
import { Container, Main, NavBar, BrandName, Menu, Footer, SubTitle, Content, Test, Title1, Section } from "../styles/home";
import React, { FormEvent, useEffect, useState } from 'react';
// import { ERC1155Standard, ERC721Collectibles, Web3Connection } from "@taikai/dappkit";

// import { ERC1155Ownable } from '@taikai/dappkit';

export default function Create() {


  // async function nftCollection() {

  //   let MULTISIG_CONTRACT = "0xc5EF893518208119968B294eE95d341C48c0f2e0";

  //   const web3Connection = new Web3Connection({
  //     web3Host: 'http://127.0.0.1:7545'
  //   });

  //   await web3Connection.start();
  //   await web3Connection.connect();
  //   const deployer = new ERC1155Standard(web3Connection);

  //   await deployer.loadAbi();
  //   const tx = await deployer.deployJsonAbi("https://api.npoint.io/47687dcd634e96f824e3");

  //   /* Instantiate and use your new ERC1155 Token Contract*/
  //   const erc1155Contract = new ERC1155Standard(web3Connection, tx.contractAddress);
  //   await erc1155Contract.start();

  //   erc1155Contract.mint(MULTISIG_CONTRACT, 0, 1000, '0x00');
  //   console.log(erc1155Contract);

  // }


  // async function deployERC1155() {

  //   const web3Connection = new Web3Connection({
  //     web3Host: 'http://127.0.0.1:7545'
  //   });

  //   await web3Connection.start();
  //   await web3Connection.connect();

  //   /* Create an ERC1155Ownable Deployer */
  //   const deployer = new ERC1155Ownable(web3Connection);

  //   /* Deploy the ERC1155 Contract */
  //   await deployer.loadAbi();
  //   const tx = await deployer.deployJsonAbi("https://api.npoint.io/47687dcd634e96f824e3");

  //   /* Instantiate and use your new ERC1155 Token Contract*/
  //   const erc1155Contract = new ERC1155Ownable(web3Connection, tx.contractAddress);
  //   await erc1155Contract.start();

  //   erc1155Contract.mint('0xTO_ADDRESS', 0, 1000, '0x12345678');

  // }

  // async function createCollectionNFT() {

  //   const web3Connection = new Web3Connection({
  //     web3Host: 'http://127.0.0.1:7545'
  //   });

  //   await web3Connection.start();
  //   await web3Connection.connect();

  //   const erc721Collectibles = new ERC721Collectibles(web3Connection);

  //   await erc721Collectibles.loadAbi();

  //   // Deploy
  //   const transactionReceipt = await erc721Collectibles.deployJsonAbi(
  //     "Building #3304",
  //     "RealState",
  //     1000,
  //     "0xc5EF893518208119968B294eE95d341C48c0f2e0", //     "0xDAI_ADDRESS",
  //     "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", //     "0xPURCHASE_TOKEN" - UDSC 
  //     "0xc5EF893518208119968B294eE95d341C48c0f2e0", //     "0xBASE_FEE_ADDRESS",
  //     "0xc5EF893518208119968B294eE95d341C48c0f2e0"  //     "0xOTHER_ADDRESS" 
  //   );

  //   console.log(transactionReceipt);

  // }

  const handleSubmit = async (event: FormEvent) => {
    event.preventDefault()
    const form = event.target as HTMLFormElement

    const data = {
      address: form.address.value as string,
      property: form.property.value as string,
      size: form.size.value as string,
      nb_room: form.nb_room.value as string,
      condition: form.condition.value as string,
      year_build: form.year_build.value as string,
      price: form.price.value as string,
    }

    console.log(data);

    // Send the metadata to IPFS
    // Create the contract from this json
    // Get the contract address
    // Mint the NFT

  }

  return (
    <Container>
      <Head>
        <title>Create a new building - NFT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <Content>
          <Section>
            <Title1 className="text-purple text-[46px] ml-[20px] mb-0">Create a new building - NFT</Title1>

            <form onSubmit={handleSubmit}>

              <GridContainer>
                <GridRow className="pt-5 pb-5">
                  <GridCol>
                    <FormGroup label="address">
                      <TextField 
                        name="address"
                        placeholder="Address of the property"

                      />
                    </FormGroup>
                  </GridCol>
                  <GridCol>
                    <FormGroup label="property">
                      <TextField 
                        name="property"
                        placeholder="Type of property"
                      />
                    </FormGroup>
                  </GridCol>
                </GridRow>

                <GridRow className="pb-5">
                  <GridCol>
                    <FormGroup label="size">
                      <TextField
                        name="size"
                        placeholder="Size"
                      />
                    </FormGroup>


                  </GridCol>
                  <GridCol>
                    <FormGroup label="nb_room">
                      <TextField
                        name="nb_room"
                        placeholder="Number of rooms"
                      />
                    </FormGroup>

                  </GridCol>
                </GridRow>

                <GridRow className="pb-5">
                  <GridCol>
                    <FormGroup label="condition">
                      <TextField
                      name="condition"
                        placeholder="Condition: New construction"
                      />
                    </FormGroup>
                  </GridCol>
                  <GridCol>
                    <FormGroup label="Year build">
                      <TextField
                        minimal
                        name="year_build"
                        type="date"
                      />
                    </FormGroup>
                  </GridCol>
                </GridRow>

                <GridRow className="pb-5">
                  <GridCol>

                    <FormGroup label="price">
                      <TextField
                        max={1000000000}
                        min={1}
                        name="price"
                        placeholder="Initial price"
                        type="number"
                      />
                    </FormGroup>

                  </GridCol>
                </GridRow>

              </GridContainer>

              <Button
                ariaLabel="Connect"
                className="pt-5"
                value="Create new property"
                variant="solid"
                action={() => createCollectionNFT()}
              />

            </form>
          </Section>

        </Content>
      </Main>
    </Container>
  );
}
